// main global script file

// called when the game starts, before the first room is loaded
function game_start()
{
  // register a GUI to use for the inventory bar
  TwoClickHandler.InventoryGUI = gInventoryBar;

  // register a Label to use for action text
  TwoClickHandler.ActionLabel = lblAction;

  // optionally set the popup distance for the inventory bar
  //TwoClickHandler.PopupProportional = 0.5;
  //TwoClickHandler.PopupDistance = 50;

  // optionally reverse the left and right mouse buttons
  //TwoClickHandler.ReversedClicks = true;
  
  // Set Idle Views of Characters (ViewNumber, StartDelay)
  cYou.SetIdleView(2, 0);
  cWoman.SetIdleView(4, 0);
  cTwinBlue.SetIdleView(5, 1);
  cTwinPink.SetIdleView(6, 0);
  cOldManDragon.SetIdleView(7, 0);
  cOldManDragon.ManualScaling = true;
  cOldManDragon.Scaling = 50;
  
  
  
  
  // SPEECH SETTINGS
  // Player must click mouse or press key for each dialog-line
  Speech.SkipStyle= eSkipMouse;
  // game.text_speed = 10; // Default 15, higher number means shorter time.
  Game.SpeechFont = eFontFont4;
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
}

// open a GUI
function open_gui(GUI* gui_to_open)
{
  TwoClickHandler.Close();
  mouse.UseModeGraphic(eModeWalkto);
  gui_to_open.Visible = true;
}

// hide a GUI
function close_gui(GUI *gui_to_close)
{
  gui_to_close.Visible = false;
  mouse.UseDefaultGraphic();
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
}

function show_save_game_dialog()
{
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();

  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

// called when a key is pressed
function on_key_press(eKeyCode keycode)
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    }
    else if (gRestoreGame.Visible)
    {
      close_gui(gRestoreGame);
    }
    else if (gSaveGame.Visible)
    {
      close_gui(gSaveGame);
    }
    else
    {
      // Escape will prompt to exit the game
      open_gui(gExitGame);
    }
  }
  else if (IsGamePaused())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyCtrlQ)
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {
    // F5 will open the save game dialog
    show_save_game_dialog();
  }
  else if (keycode == eKeyF7)
  {
    // F7 will open the restore game dialog
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will restart the game
    RestartGame();
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0);
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  // all clicks handled by TwoClickHandler script
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type)
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      player.Say("Ich kann daran nichts besonderes erkennen.");
    }
    else if (type == 2) // interact
    {
      player.Say("Damit kann ich nichts tun.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("Das wird nicht funktionieren.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      player.Say("Sieht in Ordnung aus.");
    }
    else if (type == 1) // interact
    {
      player.Say("Ich kann damit noch nichts tun.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("Nichts passiert...");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hm.");
    }
    else if (type == 1) // interact
    {
      player.Say("Ich habe nichts zu sagen");
    }
    else if (type == 3) // use inv on
    {
      player.Say("Ich glaube, ich sollte das behalten.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      player.Say("Das ist nur irgendwelcher Kram in meinem Inventar");
    }
    else if (type == 1) // interact
    {
      player.Say("Uhh, nein?!");
    }
    else if (type == 3) // use inv on
    {
      player.Say("Das ist lächerlich...");
    }
  }
}

function btnInvUp_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_OnClick(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnExitGame_OnClick(GUIControl *control, MouseButton button)
{
  open_gui(gExitGame);
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function iCup_Interact()
{
  player.Say("Es waere nicht schlau, das zu trinken.");
}

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;

  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }

    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    i ++;
  }

  // find first free save slot, starting with slot 1
  i = 1;

  while (i < 999)
  {
    if (!slots[i])
    {
      return i;
    }

    i ++;
  }

  // no free slots found
  return -1;
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("Keine freien Slots vorhanden!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  }
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }

  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

// ------------------------------------------------------------------------------------------------------------------------
// Room 1
// ------------------------------------------------------------------------------------------------------------------------

function oClouds_Move_RtoL(){
  //while (object[4].X != 0) {
  object[1].Move(-30, 200, -50, eNoBlock, eAnywhere);
  //}
}

// ------------------------------------------------------------------------------------------------------------------------
// Room 2
// ------------------------------------------------------------------------------------------------------------------------

function cWoman_Interact()
{
  player.FaceCharacter(cWoman);   // Player soll cWoman anschauen
  cWoman.FaceCharacter(cYou);     // cWoman soll Player anschauen
  if (womanHasFlowers == false) { // globale Variable
    dWoman1.Start();
  } else {
    if (womanTalked_xTimes == 0) {
      womanTalked_xTimes += 1; // globale Varibale für Character-Animation (room2.asc)
      dWoman2.Start();
    } else if (womanTalked_xTimes == 1) {
      womanTalked_xTimes += 1;
      dWoman3.Start();
    } else if (womanTalked_xTimes > 1 && womanTalked_xTimes < 5) {
      dWoman4.Start();
    } else if (womanTalked_xTimes == 5) {
      dWoman6.Start();  
    }
    
  }  
  // Rename Character nach Dialogen?
  // cWoman.Name = "Madesu";
}

// Item auf cWoman benutzen
function cWoman_UseInv()
{
  if ( player.ActiveInventory == iBouquet) { // Wenn ausgewähltes Item iBouquet ist, dann...
    cWoman.Walk(230,  180);
    player.Walk(190, 180, eBlock);
    player.FaceCharacter(cWoman);   // Player soll cWoman anschauen
    cWoman.FaceCharacter(cYou);
    player.LoseInventory(iBouquet); // Item aus Inventar entfernen
    aSuccess.Play();
    cWoman.FaceCharacter(cYou);
    womanHasFlowers = true; // globale Variable ändern zum Anpassen der Dialoge
    dWoman2.Start(); // Dialog starten
  } else if (player.ActiveInventory == iPlantea) {
    aSuccess.Play();
    player.LoseInventory(iPlantea);
    cWoman.FaceCharacter(cYou);
    dWoman5.Start();  
  }
}


// ------------------------------------------------------------------------------------------------------------------------
// Room 3
// ------------------------------------------------------------------------------------------------------------------------

function oFireflies_Move()
{
  if (object[0].X == 0 && object[0].Y == 200) {
    object[0].Move(-8, 203, -25, eNoBlock, eAnywhere);
  } if (object[0].X == -8 && object[0].Y == 203) {
    object[0].Move(-1, 207, -25, eNoBlock, eAnywhere);
  } if (object[0].X == -1 && object[0].Y == 207) {
    object[0].Move(10, 204, -25, eNoBlock, eAnywhere);
  } if (object[0].X == 10 && object[0].Y == 204) {
    object[0].Move(0, 200, -25, eNoBlock, eAnywhere);
  }
}

function cTwinBlue_Interact()
{
  player.Walk(187, 174, eBlock);
  player.FaceCharacter(cTwinBlue);
  if (twinsTalked_xTimes == 0) {
    cTwinPink.Say("Wir sollen nicht mit Fremden sprechen.");
    twinsTalked_xTimes = 1;
  } else if (twinsTalked_xTimes == 1) {
    dTwins1.Start();
  } else if (twinsTalked_xTimes > 1 && twinsTalked_xTimes < 5) {
    dTwins2.Start();
  } else if (twinsTalked_xTimes == 5) {
    dTwins3.Start();
  }
}

function cTwinPink_Interact()
{
  player.Walk(187, 174, eBlock);
  player.FaceCharacter(cTwinPink);
  if (twinsTalked_xTimes == 0) {
    cTwinPink.Say("Wir sollen nicht mit Fremden sprechen.");
    twinsTalked_xTimes = 1;
  } else if (twinsTalked_xTimes == 1) {
    dTwins1.Start();
  } else if (twinsTalked_xTimes > 1 && twinsTalked_xTimes < 5) {
    dTwins2.Start();
  } else if (twinsTalked_xTimes == 5) {
    dTwins3.Start();
  }
}

function cTwinBlue_UseInv()
{
  player.Walk(187, 174, eBlock);
  player.FaceCharacter(cTwinBlue);
  if (player.ActiveInventory == iBrokenList) {
    cTwinBlue.Say("Mit der kaputten Liste können wir nichts anfangen... Schade.");
  } else if (player.ActiveInventory == iFixedList) {
    player.LoseInventory(iFixedList);
    dTwins_helped.Start();
  }
}

function cTwinPink_UseInv()
{
  player.Walk(187, 174, eBlock);
  player.FaceCharacter(cTwinPink);
  if (player.ActiveInventory == iBrokenList) {
    cTwinPink.Say("Mit der kaputten Liste können wir nichts anfangen... Schade.");
  } else if (player.ActiveInventory == iFixedList) {
    player.LoseInventory(iFixedList);
    dTwins_helped.Start();
  }
}

function cYou_UseInv()
{
  if (player.ActiveInventory == iBrokenList) {
    player.ChangeRoom(7);
  } else if (player.ActiveInventory == iFixedList) {
    player.Say("Scheint wieder ganz zu sein. Lesen kann ich es trotzdem nicht.");  
  }
}

function iBouquet_Look()
{
  player.Say("Ein Blumenstrauß. Sieht toll aus!");
}

// Back-Button im Minigame "kaputte Liste" (Twins)
function btnBack_OnClick(GUIControl *control, MouseButton button)
{
  cYou.ChangeRoom(roomNumber);
  gBackFromMinigame.Visible = false;
}

function cTreeface_AnyClick()
{
  player.Walk(187, 174, eBlock);
  player.FaceCharacter(cTreeface);
  if (dialogFacetree == true && talkedToTree == false) {
    dTreeface1.Start();
  }
}

function cOldManDragon_AnyClick()
{
  player.FaceCharacter(cOldManDragon);
  if (glokiHealthy == false) {
    dGloki1.Start();
  } else {
    if (spaceShipFuelFull == false) {
      dGloki2.Start();
    } else {
      dGloki3.Start(); 
    }
  }
}



function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}



function btnEndGame_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}
